<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title id="x-1">Handlers</title>
 <conbody id="x-2">
  <p id="x-3">Now that we have an application, we need some way to run it. In WAI parlance, this is a
    <term id="x-4">handler</term>. WAI has some basic, standard handlers, such as a standalone server (Warp,
   discussed below), FastCGI, SCGI and CGI. This spectrum allows WAI applications to be run on
   anything from dedicated servers down to shared hosting. But in addition to these, WAI has some
   more interesting backends:<dl id="x-5">
    <dlentry id="x-6">
     <dt id="x-7">Webkit</dt>
     <dd id="x-8">This backend embeds a Warp server and calls out to QtWebkit. By launching a server,
      followed by launching a new standalone browser window, we have faux desktop applications.</dd>
    </dlentry>
    <dlentry id="x-9">
     <dt id="x-10">Launch</dt>
     <dd id="x-11">This is a slight variant on Webkit. Having to deploy the Qt and Webkit libraries can be a
      bit burdensome, so instead we just launch the user's default browser.</dd>
    </dlentry>
    <dlentry id="x-12">
     <dt id="x-13">Test</dt>
     <dd id="x-14">Even testing counts as a handler. After all, testing is simply the act of running
      an application and inspecting the responses.</dd>
    </dlentry>
   </dl></p>
  <p id="x-15">Most developers will likely use Warp. It is lightweight enough to be used for
   testing. It requires no config files, no folder hierarchy and no long-running, administrator
   owned process. It's a simple library that gets compiled into your application or run via the
   Haskell interpreter. On the flip side, Warp is an incredibly fast server, with protection from
   all kinds of attack vectors, such as slow loris and infinite headers. Warp can be the only web
   server you need, though it is also quite happy to sit behind a reverse HTTP proxy.</p>
  <p>The PONG benchmark measures the requests per second of various servers for the 4-byte response
   body "PONG". In this graph, Yesod is measured as a framework on top of Warp. As can be seen, the
   Haskell servers (Warp, Happstack and Snap) lead the pack.</p>
  <fig id="x-16">
   <title id="x-17">Warp PONG Benchmark</title>
   <image href="http://www.yesodweb.com/static/benchmarks/2011-03-17/extra-large.png" id="image_xrh_agm_gd"/>
  </fig>
  <p id="x-18">Most of the reasons for Warp's speed have already been spelled out in the overall
   description of WAI: enumerators, builders and packed datatypes. The last piece in the puzzle is
   from the Glasgow Haskell Compiler's (GHC's) multithreaded runtime. GHC, Haskell's flagship
   compiler, has light-weight green threads. Unlike system threads, it is possible to spin up
   thousands of these without serious performance hits. Therefore, in Warp, each connection is
   handled by its own green thread.</p>
  <p id="x-19">The next trick is asynchronous I/O. Any web server hoping to scale to tens of thousands of
   requests per second will need some type of asynchronous communication. In most languages, this
   involves complicated programming involving callbacks. GHC lets us cheat: we program as if we're
   using a synchronous API, and GHC automatically switches between different green threads waiting
   for activity.</p>
  <p id="x-20">Under the surface, GHC uses whatever system is provided by the host operating system,
   such as <i>kqueue</i>, <i>epoll</i> and <i>select</i>. This gives us all the performance of an
   event-based IO system, without worrying about cross-platform issues or writing in a
   callback-oriented way.</p>
 </conbody>
</concept>
