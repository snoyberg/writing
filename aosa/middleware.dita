<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title id="x-1">Middleware</title>
 <conbody id="x-2">
  <p id="x-3">In between handlers and applications, we have middlewares. Technically, a middleware
   is an <term id="x-4">application transformer</term>: it takes one application, and returns a new
   one. This is defined as <codeph id="x-5">type Middleware = Application -&gt;
   Application</codeph>. The best way to understand the purpose of a middleware is to look at some
   common ones:<ul id="ul_kau_msu_id">
    <li id="x-6"><b id="x-15">gzip</b> automatically compresses the response from an application.</li>
    <li id="x-7"><b id="x-16">jsonp</b> automatically converts JSON responses to <xref id="x-8" href="http://en.wikipedia.org/wiki/JSONP" format="html" scope="external">JSON-P</xref>
     responses when the client provided a callback parameter.</li>
    <li id="x-9"><b id="x-17">autohead</b> will generate appropriate HEAD responses based on the GET response
     of an application.</li>
    <li id="x-10"><b id="x-18">debug</b> will print debug information to the console or a log on each
     request.</li>
   </ul></p>
  <p id="x-11">The theme here is to factor out common code from applications and let it be shared easily. Note
   that, based on the definition of a middleware, we can easily stack these things up. The general
   workflow of a middleware is:<ol id="ol_npi_zsu_id">
    <li id="x-12">Take the request value and apply some modifications.</li>
    <li id="x-13">Pass the modified request to the application and receive a response.</li>
    <li id="x-14">Modify the response and return it to the handler.</li>
   </ol>In the case of stacked middlewares, instead of passing to the application or handler, the
   middleware will actually be passing to the inner and outer middlewares, respectively.</p>
 </conbody>
</concept>
