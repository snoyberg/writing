<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="conceptId">
 <title>Middleware</title>
 <conbody>
  <p>In between handlers and applications, we have middlewares. Technically, a middleware is an
    <term>application transformer</term>: it takes one application, and returns a new one. This is
   defined as <codeph>type Middleware = Application -> Application</codeph>. But the best way to
   understand the purpose of a middleware is to look at some common ones:<ul id="ul_kau_msu_id">
    <li>gzip automatically compresses the response from an application.</li>
    <li>jsonp automatically converts JSON responses to JSON-P responses when the client provided a
     callback parameter.<note>For those not familiar, JSON-P is a way of avoiding cross-domain
      restrictions on Javascript. Instead of returning a JSON object, we return some Javascript that
      applies a callback function to the JSON.</note></li>
    <li>autohead will generate appropriate HEAD responses based on the GET response of an
     application.</li>
    <li>debug will print debug information to the console or a log on each request.</li>
   </ul></p>
  <p>The theme here is to factor out common code from applications and let it be shared easily. Note
   that, based on the definition of a middleware, we can easily stack these things up. The general
   workflow of a middleware is:<ol id="ol_npi_zsu_id">
    <li>Take the request value and apply some modifications.</li>
    <li>Pass the modified request to the application and receive a response.</li>
    <li>Modify the response and return it to the handler.</li>
   </ol>In the case of stacked middlewares, instead of passing to the application or handler, the
   middleware will actually be passing to the inner and outer middlewares, respectively.</p>
 </conbody>
</concept>
