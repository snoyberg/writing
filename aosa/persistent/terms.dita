<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="terminology">
 <title>Terminology</title>
 <conbody>
  <p>The most primitive datatype in Persistent is the <codeph>PersistValue</codeph>. This represents
   any raw data that can appear within the database, such as a number, a date, or a string. Of
   course, sometimes you'll have some more user-friendly datatypes you want to store, like HTML. For
   that, we have the <codeph>PersistField</codeph> class. Internally, a
    <codeph>PersistField</codeph> expresses itself to the database in terms of a
    <codeph>PersistValue</codeph>.</p>
  <p>All of this is very nice, but we'll really want to combine different fields together into a
   larger picture. For this, we have a <codeph>PersistEntity</codeph>, which is basically a
   collection of <codeph>PersistField</codeph>s. And finally, we have a
    <codeph>PersistBackend</codeph> that describes how to create, read, update and delete these
   entities.</p>
  <p>As a practical example, consider storing a person in a database. We want to store the person's
   name, birthday, and a profile image (a PNG file). So we'll create a new entity
    <codeph>Person</codeph> with three fields: a <codeph>Text</codeph>, a <codeph>Day</codeph> and a
    <codeph>PNG</codeph>. Each of those get stored in the database using a different
    <codeph>PersistValue</codeph> constructor: <codeph>PersistText</codeph>,
    <codeph>PersistDay</codeph> and <codeph>PersistByteString</codeph>, respectively.</p>
  <p>There's nothing surprising about those first two mappings, but the last one is interesting.
   There's no specific constructor for storing PNG content in a database, so instead we use a more
   generic type (a ByteString, which is just a sequence of bytes). We could use the same mechanism
   to store other types of arbitrary data.</p>
  <note>The commonly held best practice for storing images is to keep the data on the filesystem and
   just keep a path to the image in the database. I'm not advocating against that approach here,
   just using database-stored images as an example.</note>
  <p>How is all this represented in the database? Let's take SQL as an example. The
    <codeph>Person</codeph> entity becomes a table with three columns: name, birthday and picture.
   Each field gets stored as a different SQL type: <codeph>Text</codeph> becomes a
    <codeph>VARCHAR</codeph>, <codeph>Day</codeph> becomes a <codeph>Date</codeph> and
    <codeph>PNG</codeph> becomes a <codeph>BLOB</codeph> (or <codeph>BYTEA</codeph>).</p>
 </conbody>
</concept>
